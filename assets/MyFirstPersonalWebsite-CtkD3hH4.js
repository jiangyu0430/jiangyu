const n=`# 我的第一个个人网站

在这个被 AI 改变的时代，**构建个人网站已不再是开发者的专属技能**。哪怕你只是略懂 HTML 和 CSS，也能借助强大的工具、社区与 AI 助手，一步步搭建出一个属于自己的数字空间。而我，就是这样一个“半路出家”的前端实践者。

这篇文章想和你分享，我是如何在 ChatGPT 的帮助下，完成了我的第一个个人网站——从架构设计、技术选型，到部署上线，甚至包括后续的小细节修改。它既是一个过程记录，也希望能为像我一样刚上手的朋友们提供参考。

[https://www.notion.so](https://www.notion.so)

### **🧠 为什么我想做一个个人网站？**

坦率地说，起初我并没有非常明确的“品牌意识”或“流量目标”。只是单纯想要有一个空间，能展示我的作品、项目、思考，哪怕只是一个静静摆放链接与图片的页面，也足够有意义。

相比把内容分散在多个平台（如 Behance、知乎、B 站），**个人网站意味着我可以控制一切：设计、结构、节奏，甚至每一段文字的位置和颜色**。这是我真正拥有的地方。

### **🧱 技术选型：React、Tailwind、Vite，一个都不少**

虽然我不是程序员，但过去多少接触过前端界面，知道一些 HTML、CSS，甚至能读懂部分 React 语法。在 ChatGPT 的建议下，我选择了：

- **React**：作为组件化的前端框架，它便于模块复用
- **Tailwind CSS**：原子化 CSS，让我可以快速定义页面样式，免去命名痛苦
- **Vite**：轻量构建工具，开发体验极佳
- **GitHub + Vercel**：版本管理与自动部署，像魔术一样上线

这些组合虽然略微“前端重”，但**一旦打通开发流程，就能拥有高度自由、灵活扩展的能力**。对于希望持续维护内容的人来说，这是非常值得的投入。

[Tailwind CSS - Rapidly build modern websites without ever leaving your HTML.](https://v3.tailwindcss.com/)

### **🤖 有 ChatGPT，为什么我还要懂点代码？**

这是我在过程中反复体会到的。

是的，ChatGPT 可以帮你：

- 生成 HTML 模板
- 编写组件结构
- 修复控制台报错
- 提供部署指令
- 优化交互动效

但如果你**完全不了解代码结构、标签语义或前端组件的生命周期**，你很难判断 AI 给出的修改建议对不对、风险大不大，甚至连“插入代码的具体位置”都可能搞错。

我举两个例子：

1. **图片懒加载问题**

   我希望页面滚动时再加载某些图片，于是我问 ChatGPT。它推荐了 IntersectionObserver 并提供了完整的封装代码。但我需要知道“它应该放在哪个组件下”“Tailwind 样式是否冲突”这些细节，否则实现效果不理想。

2. **页面滚动锁定交互**

   我想在滚动到某个区域时，让该区域锁定页面视图，并在内部滚动后才释放页面滚动。ChatGPT 给了我完整思路和实现代码。但**如果我不清楚 CSS 中 overflow 的作用，或不了解 React 的事件传播机制，是无法调试成功的**。

这让我意识到，**AI 是加速器，不是替代者**。它可以帮你节省 90% 的时间，但剩下那 10%，你必须靠自己理解代码、掌握逻辑，才能让它“真正为你所用”。

### **🧱 网站结构：从首页到 About，每个模块都是积木**

在 ChatGPT 的引导下，我逐步拆解了网站的页面构成：

- 首页：首页大图、欢迎语、最新项目预览
- About 页面：自我介绍、职业经历、兴趣爱好
- Projects 页面：项目卡片、分类、Hover 动效
- Blog 页面：文章列表，接入 Markdown 内容
- Contact 页面：邮件链接、社交账号入口

每个模块我都当作“组件”来做，**让它们彼此独立又能复用**。比如“卡片展示组件”，我可以在首页、Projects 页、甚至 Blog 中都用到，只是传入的内容不同。

这种开发思维正是 React 最强的部分，而 Tailwind 的类名机制让我可以在一个组件中快速迭代样式，极大地提升效率。

### **🚀 部署上线：从 GitHub 到 Vercel，只需几分钟**

Vercel 是我目前最推荐的部署平台之一：

- 与 GitHub 深度集成，每次推送自动构建上线
- 免费域名可直接访问（如 yourname.vercel.app）
- 支持自定义域名绑定、HTTPS 自动配置
- 构建失败时有详细日志提示，方便排查

当我第一次把代码推上 GitHub，然后在 Vercel 上看到“正在构建…”再看到网站成功上线的那一刻，我真的很惊喜。**整个过程没有任何“购买服务器”“配置 Nginx”“写 shell 脚本”这些传统部署烦恼**。

### **🧩 小细节的修改与调优**

当网站主体完成后，我也进入了另一个阶段：打磨细节。

比如：

- 鼠标样式个性化（光标跟随特效）
- 页面滚动时的延迟动效
- 卡片区域的触发动画阈值自定义
- 移动端导航隐藏与切换逻辑

这些虽然是“前端小技巧”，但 ChatGPT 总是能根据我的描述快速给出代码，甚至逐行解释含义，**帮我学会的同时，也节省了大量时间**。

### **📝 总结：这是一个属于我自己的空间**

当我回顾这段旅程时，我很感谢两个东西：

1. **我曾经学过一些代码**
2. **现在有了 ChatGPT 这样可靠的 AI 助手**

如果没有前者，我会无从判断 ChatGPT 给的代码是否靠谱；如果没有后者，我会在遇到报错和组件逻辑时卡死，寸步难行。

现在，我拥有了一个自己构建、可维护、可拓展的个人网站。它并不复杂，但它是独立的、完整的、有我自己风格的。它的每一个页面、每一个动效、每一段文字，都是我自己“写”出来的，而不是通过一键模板生成。

### **💬 写给看到这里的你：**

如果你也想搭建一个属于你的网站，无论是作品集、博客，还是兴趣页，我非常建议你试着自己动手写写看。你不需要成为前端专家，**只需要保持耐心、好奇心，以及向 AI 求助的能力**。

你会发现，这世界上最酷的页面，不是刷屏的热点，而是那个你亲手搭建、不断修改、每天看着都会感到成就感的页面。

这，就是我的第一个个人网站的故事。
`;export{n as default};
